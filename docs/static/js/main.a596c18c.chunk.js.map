{"version":3,"sources":["App.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifts.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","serviceWorker.js","index.js","logo.svg"],"names":["App","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","url","title","className","alt","src","getGifs","category","a","encodeURI","fetch","response","json","data","arrayData","map","item","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","key","protoTypes","PropTypes","string","isRequired","GifApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mPAyBeA,I,eCvBFC,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAe5C,OAEI,0BAAMC,SAXW,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC/CN,EAAc,OAQb,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,gBCJlBG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAE/B,OACQ,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAOG,IAAKJ,IACtB,2BAAIC,K,uBCPPI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACD,GACRP,EAHa,uDACJ,mCADI,cAGqDQ,UAAUF,GAH/D,kBAEL,IAFK,SAIIG,MAAMT,GAJV,cAIbU,EAJa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KAEFC,EAAYD,EAAKE,KAAI,SAACC,GAAD,YAAW,CAClCC,GAAID,EAAKC,GACTf,MAAOc,EAAKd,MACZD,IAAG,UAAEe,EAAKE,cAAP,aAAE,EAAaC,iBAAiBlB,QAVpB,kBAaba,GAba,4CAAH,sDCKPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAACd,IAEGe,EDb2BK,CAAapB,GAAjCW,EAFuB,EAE7BL,KAAcQ,EAFe,EAEfA,QAEtB,OACI,oCACI,4BAAKd,GAEHc,GAAW,cAEb,yBAAKlB,UAAU,aAEPe,EAAOH,KAAI,SAAAa,GACP,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAMX,IAAQW,UAU/DR,EAAQU,WAAa,CACjBvB,SAAUwB,IAAUC,OAAOC,YEzBxB,IAAMC,EAAS,WAAM,MAGY/C,mBAAS,CAAC,gBAHtB,mBAGjBQ,EAHiB,KAGLT,EAHK,KAKxB,OACI,oCACI,sCACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,EAAeS,WAAYA,IAE/CA,EAAWoB,KAAI,SAACR,GAAD,OACZ,kBAAC,EAAD,CACAsB,IAAKtB,EACLA,SAAUA,SCNb4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a596c18c.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useCallback } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n       e.preventDefault();\r\n       if(inputValue.trim().length > 2){\r\n        setCategories((categories) => [inputValue, ...categories]);\r\n       setInputValue(\"\");\r\n    }\r\n      \r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n        <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            />\r\n        </form>     \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ url, title }) => {\r\n\r\n    return (\r\n            <div className=\"card\">\r\n                <img alt={title} src={url} />\r\n                <p>{title}</p>\r\n            </div>\r\n    )\r\n}","export const getGifs = async (category) => {\r\n    const apiKey = 'xcHg7FIQp6WWKUMHPvCKBqLhvryFI31E';\r\n    const limit = 10;\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=${limit}`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const arrayData = data.map((item) => ({\r\n        id: item.id,\r\n        title: item.title,\r\n        url: item.images?.downsized_medium.url\r\n    }\r\n    ));\r\n   return arrayData;\r\n\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from './../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && 'Cargando...'}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(image => {\r\n                        return <GifGridItem key={image.id} {...image} />\r\n                    }\r\n\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.protoTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifts'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\nexport const GifApp = () => {\r\n\r\n    //const categories = ['Dragon Ball', 'Chavo del 8', 'Samurai X'];\r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories} categories={categories}/>\r\n                {\r\n                    categories.map((category) => (\r\n                       <GifGrid \r\n                       key={category}\r\n                       category={category} />\r\n                    ))\r\n                }    \r\n        </>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {GifApp} from './GifApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <GifApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}